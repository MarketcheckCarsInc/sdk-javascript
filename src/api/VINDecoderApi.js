/**
 * Marketcheck Cars API
 * <b>Access the New, Used and Certified cars inventories for all Car Dealers in US.</b> <br/>The data is sourced from online listings by over 44,000 Car dealers in US. At any time, there are about 6.2M searchable listings (about 1.9M unique VINs) for Used & Certified cars and about 6.6M (about 3.9M unique VINs) New Car listings from all over US. We use this API at the back for our website <a href='https://www.marketcheck.com' target='_blank'>www.marketcheck.com</a> and our Android and iOS mobile apps too.<br/><h5> Few useful links : </h5><ul><li>A quick view of the API and the use cases is depicated <a href='https://portals.marketcheck.com/mcapi/' target='_blank'>here</a></li><li>The Postman collection with various usages of the API is shared here https://www.getpostman.com/collections/2752684ff636cdd7bac2</li></ul>
 *
 * OpenAPI spec version: 1.0.3
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.0-SNAPSHOT
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient', 'model/Build', 'model/Economy', 'model/Error', 'model/FuelEfficiency', 'model/SafetyRating'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'), require('../model/Build'), require('../model/Economy'), require('../model/Error'), require('../model/FuelEfficiency'), require('../model/SafetyRating'));
  } else {
    // Browser globals (root is window)
    if (!root.MarketcheckCarsApi) {
      root.MarketcheckCarsApi = {};
    }
    root.MarketcheckCarsApi.VINDecoderApi = factory(root.MarketcheckCarsApi.ApiClient, root.MarketcheckCarsApi.Build, root.MarketcheckCarsApi.Economy, root.MarketcheckCarsApi.Error, root.MarketcheckCarsApi.FuelEfficiency, root.MarketcheckCarsApi.SafetyRating);
  }
}(this, function(ApiClient, Build, Economy, Error, FuelEfficiency, SafetyRating) {
  'use strict';

  /**
   * VINDecoder service.
   * @module api/VINDecoderApi
   * @version 1.0.3
   */

  /**
   * Constructs a new VINDecoderApi. 
   * @alias module:api/VINDecoderApi
   * @class
   * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
   * default to {@link module:ApiClient#instance} if unspecified.
   */
  var exports = function(apiClient) {
    this.apiClient = apiClient || ApiClient.instance;


    /**
     * Callback function to receive the result of the decode operation.
     * @callback module:api/VINDecoderApi~decodeCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Build} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * VIN Decoder
     * Get the basic information on specifications for a car identified by a valid VIN
     * @param {String} vin VIN to decode
     * @param {Object} opts Optional parameters
     * @param {String} opts.apiKey The API Authentication Key. Mandatory with all API calls.
     * @param {module:api/VINDecoderApi~decodeCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Build}
     */
    this.decode = function(vin, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'vin' is set
      if (vin === undefined || vin === null) {
        throw new Error("Missing the required parameter 'vin' when calling decode");
      }


      var pathParams = {
        'vin': vin
      };
      var queryParams = {
        'api_key': opts['apiKey'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = Build;

      return this.apiClient.callApi(
        '/vin/{vin}/specs', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getEconomy operation.
     * @callback module:api/VINDecoderApi~getEconomyCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Economy} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get Economy based on environmental factors
     * [MOCK] Calculate Economy i.e. Environmental Friendliness
     * @param {String} vin VIN as a reference to the type of car for which Environmental Economy data is to be returned
     * @param {Object} opts Optional parameters
     * @param {String} opts.apiKey The API Authentication Key. Mandatory with all API calls.
     * @param {module:api/VINDecoderApi~getEconomyCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Economy}
     */
    this.getEconomy = function(vin, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'vin' is set
      if (vin === undefined || vin === null) {
        throw new Error("Missing the required parameter 'vin' when calling getEconomy");
      }


      var pathParams = {
      };
      var queryParams = {
        'api_key': opts['apiKey'],
        'vin': vin,
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = Economy;

      return this.apiClient.callApi(
        '/economy', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getEfficiency operation.
     * @callback module:api/VINDecoderApi~getEfficiencyCallback
     * @param {String} error Error message, if any.
     * @param {module:model/FuelEfficiency} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get fuel effeciency
     * [MOCK] Calculate fuel efficiency from taxonomy db mileage values
     * @param {String} vin VIN as a reference to the type of car for which fuel data is to be returned
     * @param {Object} opts Optional parameters
     * @param {String} opts.apiKey The API Authentication Key. Mandatory with all API calls.
     * @param {module:api/VINDecoderApi~getEfficiencyCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/FuelEfficiency}
     */
    this.getEfficiency = function(vin, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'vin' is set
      if (vin === undefined || vin === null) {
        throw new Error("Missing the required parameter 'vin' when calling getEfficiency");
      }


      var pathParams = {
      };
      var queryParams = {
        'api_key': opts['apiKey'],
        'vin': vin,
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = FuelEfficiency;

      return this.apiClient.callApi(
        '/fuel_efficiency', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getSafetyRating operation.
     * @callback module:api/VINDecoderApi~getSafetyRatingCallback
     * @param {String} error Error message, if any.
     * @param {module:model/SafetyRating} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get Safety Rating
     * [MOCK] Get Safety ratings from third party sources
     * @param {String} vin VIN to fetch the safety ratings
     * @param {Object} opts Optional parameters
     * @param {String} opts.apiKey The API Authentication Key. Mandatory with all API calls.
     * @param {module:api/VINDecoderApi~getSafetyRatingCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/SafetyRating}
     */
    this.getSafetyRating = function(vin, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'vin' is set
      if (vin === undefined || vin === null) {
        throw new Error("Missing the required parameter 'vin' when calling getSafetyRating");
      }


      var pathParams = {
      };
      var queryParams = {
        'api_key': opts['apiKey'],
        'vin': vin,
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = SafetyRating;

      return this.apiClient.callApi(
        '/safety', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
  };

  return exports;
}));
