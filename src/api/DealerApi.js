/**
 * Marketcheck Cars API
 * <b>Access the New, Used and Certified cars inventories for all Car Dealers in US.</b> <br/>The data is sourced from online listings by over 44,000 Car dealers in US. At any time, there are about 6.2M searchable listings (about 1.9M unique VINs) for Used & Certified cars and about 6.6M (about 3.9M unique VINs) New Car listings from all over US. We use this API at the back for our website <a href='https://www.marketcheck.com' target='_blank'>www.marketcheck.com</a> and our Android and iOS mobile apps too.<br/><h5> Few useful links : </h5><ul><li>A quick view of the API and the use cases is depicated <a href='https://portals.marketcheck.com/mcapi/' target='_blank'>here</a></li><li>The Postman collection with various usages of the API is shared here https://www.getpostman.com/collections/2752684ff636cdd7bac2</li></ul>
 *
 * OpenAPI spec version: 1.0.3
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.0-SNAPSHOT
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient', 'model/BaseListing', 'model/Dealer', 'model/DealerLandingPage', 'model/DealerRating', 'model/DealerReview', 'model/DealersResponse', 'model/Error'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'), require('../model/BaseListing'), require('../model/Dealer'), require('../model/DealerLandingPage'), require('../model/DealerRating'), require('../model/DealerReview'), require('../model/DealersResponse'), require('../model/Error'));
  } else {
    // Browser globals (root is window)
    if (!root.MarketcheckCarsApi) {
      root.MarketcheckCarsApi = {};
    }
    root.MarketcheckCarsApi.DealerApi = factory(root.MarketcheckCarsApi.ApiClient, root.MarketcheckCarsApi.BaseListing, root.MarketcheckCarsApi.Dealer, root.MarketcheckCarsApi.DealerLandingPage, root.MarketcheckCarsApi.DealerRating, root.MarketcheckCarsApi.DealerReview, root.MarketcheckCarsApi.DealersResponse, root.MarketcheckCarsApi.Error);
  }
}(this, function(ApiClient, BaseListing, Dealer, DealerLandingPage, DealerRating, DealerReview, DealersResponse, Error) {
  'use strict';

  /**
   * Dealer service.
   * @module api/DealerApi
   * @version 1.0.3
   */

  /**
   * Constructs a new DealerApi. 
   * @alias module:api/DealerApi
   * @class
   * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
   * default to {@link module:ApiClient#instance} if unspecified.
   */
  var exports = function(apiClient) {
    this.apiClient = apiClient || ApiClient.instance;


    /**
     * Callback function to receive the result of the dealerSearch operation.
     * @callback module:api/DealerApi~dealerSearchCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DealersResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Find car dealers around
     * The dealers API returns a list of dealers around a given point and radius. Max radius of only 50 miles is supported.
     * @param {Number} latitude Latitude component of location
     * @param {Number} longitude Longitude component of location
     * @param {Number} radius Radius around the search location
     * @param {Object} opts Optional parameters
     * @param {String} opts.apiKey The API Authentication Key. Mandatory with all API calls.
     * @param {Number} opts.rows Number of results to return. Default is 10. Max is 50
     * @param {Number} opts.start Offset for the search results. Default is 1.
     * @param {module:api/DealerApi~dealerSearchCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DealersResponse}
     */
    this.dealerSearch = function(latitude, longitude, radius, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'latitude' is set
      if (latitude === undefined || latitude === null) {
        throw new Error("Missing the required parameter 'latitude' when calling dealerSearch");
      }

      // verify the required parameter 'longitude' is set
      if (longitude === undefined || longitude === null) {
        throw new Error("Missing the required parameter 'longitude' when calling dealerSearch");
      }

      // verify the required parameter 'radius' is set
      if (radius === undefined || radius === null) {
        throw new Error("Missing the required parameter 'radius' when calling dealerSearch");
      }


      var pathParams = {
      };
      var queryParams = {
        'api_key': opts['apiKey'],
        'latitude': latitude,
        'longitude': longitude,
        'radius': radius,
        'rows': opts['rows'],
        'start': opts['start'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = DealersResponse;

      return this.apiClient.callApi(
        '/dealers', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getDealer operation.
     * @callback module:api/DealerApi~getDealerCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Dealer} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Dealer by id
     * Get a particular dealer&#39;s information by its id
     * @param {String} dealerId Dealer id to get all the dealer info attributes
     * @param {Object} opts Optional parameters
     * @param {String} opts.apiKey The API Authentication Key. Mandatory with all API calls.
     * @param {module:api/DealerApi~getDealerCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Dealer}
     */
    this.getDealer = function(dealerId, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'dealerId' is set
      if (dealerId === undefined || dealerId === null) {
        throw new Error("Missing the required parameter 'dealerId' when calling getDealer");
      }


      var pathParams = {
        'dealer_id': dealerId
      };
      var queryParams = {
        'api_key': opts['apiKey'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = Dealer;

      return this.apiClient.callApi(
        '/dealer/{dealer_id}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getDealerActiveInventory operation.
     * @callback module:api/DealerApi~getDealerActiveInventoryCallback
     * @param {String} error Error message, if any.
     * @param {module:model/BaseListing} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Dealer inventory
     * Get a dealer&#39;s currently active inventory
     * @param {String} dealerId Id representing the dealer to fetch the active inventory for
     * @param {Object} opts Optional parameters
     * @param {String} opts.apiKey The API Authentication Key. Mandatory with all API calls.
     * @param {Number} opts.rows Number of results to return. Default is 10. Max is 50
     * @param {Number} opts.start Page number to fetch the results for the given criteria. Default is 1. Pagination is allowed only till first 1000 results for the search and sort criteria. The page value can be only between 1 to 1000/rows
     * @param {module:api/DealerApi~getDealerActiveInventoryCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/BaseListing}
     */
    this.getDealerActiveInventory = function(dealerId, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'dealerId' is set
      if (dealerId === undefined || dealerId === null) {
        throw new Error("Missing the required parameter 'dealerId' when calling getDealerActiveInventory");
      }


      var pathParams = {
        'dealer_id': dealerId
      };
      var queryParams = {
        'api_key': opts['apiKey'],
        'rows': opts['rows'],
        'start': opts['start'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = BaseListing;

      return this.apiClient.callApi(
        '/dealer/{dealer_id}/active/inventory', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getDealerHistoricalInventory operation.
     * @callback module:api/DealerApi~getDealerHistoricalInventoryCallback
     * @param {String} error Error message, if any.
     * @param {module:model/BaseListing} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Dealer&#39;s historical inventory
     * [v1 : Not Implemented Yet] - Get a dealer&#39;s historical inventory
     * @param {String} dealerId Id representing the dealer to fetch the active inventory for
     * @param {module:api/DealerApi~getDealerHistoricalInventoryCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/BaseListing}
     */
    this.getDealerHistoricalInventory = function(dealerId, callback) {
      var postBody = null;

      // verify the required parameter 'dealerId' is set
      if (dealerId === undefined || dealerId === null) {
        throw new Error("Missing the required parameter 'dealerId' when calling getDealerHistoricalInventory");
      }


      var pathParams = {
        'dealer_id': dealerId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = BaseListing;

      return this.apiClient.callApi(
        '/dealer/{dealer_id}/historical/inventory', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getDealerLandingPage operation.
     * @callback module:api/DealerApi~getDealerLandingPageCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DealerLandingPage} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Experimental: Get cached version of dealer landing page by dealer id
     * Experimental: Get cached version of dealer landing page by dealer id
     * @param {String} dealerId Robot id to get the landing page html for
     * @param {Object} opts Optional parameters
     * @param {String} opts.apiKey The API Authentication Key. Mandatory with all API calls.
     * @param {module:api/DealerApi~getDealerLandingPageCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DealerLandingPage}
     */
    this.getDealerLandingPage = function(dealerId, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'dealerId' is set
      if (dealerId === undefined || dealerId === null) {
        throw new Error("Missing the required parameter 'dealerId' when calling getDealerLandingPage");
      }


      var pathParams = {
        'dealer_id': dealerId
      };
      var queryParams = {
        'api_key': opts['apiKey'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = DealerLandingPage;

      return this.apiClient.callApi(
        '/dealer/{dealer_id}/landing', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getDealerRatings operation.
     * @callback module:api/DealerApi~getDealerRatingsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DealerRating} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Dealer&#39;s Rating
     * [MOCK] Get a dealer&#39;s Rating
     * @param {String} dealerId Id representing the dealer to fetch the ratings for
     * @param {module:api/DealerApi~getDealerRatingsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DealerRating}
     */
    this.getDealerRatings = function(dealerId, callback) {
      var postBody = null;

      // verify the required parameter 'dealerId' is set
      if (dealerId === undefined || dealerId === null) {
        throw new Error("Missing the required parameter 'dealerId' when calling getDealerRatings");
      }


      var pathParams = {
        'dealer_id': dealerId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = DealerRating;

      return this.apiClient.callApi(
        '/dealer/{dealer_id}/ratings', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getDealerReviews operation.
     * @callback module:api/DealerApi~getDealerReviewsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DealerReview} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Dealer&#39;s Review
     * [MOCK] Get a dealer&#39;s Review
     * @param {String} dealerId Id representing the dealer to fetch the ratings for
     * @param {module:api/DealerApi~getDealerReviewsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DealerReview}
     */
    this.getDealerReviews = function(dealerId, callback) {
      var postBody = null;

      // verify the required parameter 'dealerId' is set
      if (dealerId === undefined || dealerId === null) {
        throw new Error("Missing the required parameter 'dealerId' when calling getDealerReviews");
      }


      var pathParams = {
        'dealer_id': dealerId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = DealerReview;

      return this.apiClient.callApi(
        '/dealer/{dealer_id}/reviews', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
  };

  return exports;
}));
