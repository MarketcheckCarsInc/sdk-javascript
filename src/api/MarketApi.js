/**
 * Marketcheck Cars API
 * <b>Access the New, Used and Certified cars inventories for all Car Dealers in US.</b> <br/>The data is sourced from online listings by over 44,000 Car dealers in US. At any time, there are about 6.2M searchable listings (about 1.9M unique VINs) for Used & Certified cars and about 6.6M (about 3.9M unique VINs) New Car listings from all over US. We use this API at the back for our website <a href='https://www.marketcheck.com' target='_blank'>www.marketcheck.com</a> and our Android and iOS mobile apps too.<br/><h5> Few useful links : </h5><ul><li>A quick view of the API and the use cases is depicated <a href='https://portals.marketcheck.com/mcapi/' target='_blank'>here</a></li><li>The Postman collection with various usages of the API is shared here https://www.getpostman.com/collections/2752684ff636cdd7bac2</li></ul>
 *
 * OpenAPI spec version: 1.0.3
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.0-SNAPSHOT
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient', 'model/Averages', 'model/ComparisonPoint', 'model/CompetitorsPoint', 'model/DepreciationPoint', 'model/Error', 'model/Mds', 'model/PopularityItem', 'model/TrendPoint'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'), require('../model/Averages'), require('../model/ComparisonPoint'), require('../model/CompetitorsPoint'), require('../model/DepreciationPoint'), require('../model/Error'), require('../model/Mds'), require('../model/PopularityItem'), require('../model/TrendPoint'));
  } else {
    // Browser globals (root is window)
    if (!root.MarketcheckCarsApi) {
      root.MarketcheckCarsApi = {};
    }
    root.MarketcheckCarsApi.MarketApi = factory(root.MarketcheckCarsApi.ApiClient, root.MarketcheckCarsApi.Averages, root.MarketcheckCarsApi.ComparisonPoint, root.MarketcheckCarsApi.CompetitorsPoint, root.MarketcheckCarsApi.DepreciationPoint, root.MarketcheckCarsApi.Error, root.MarketcheckCarsApi.Mds, root.MarketcheckCarsApi.PopularityItem, root.MarketcheckCarsApi.TrendPoint);
  }
}(this, function(ApiClient, Averages, ComparisonPoint, CompetitorsPoint, DepreciationPoint, Error, Mds, PopularityItem, TrendPoint) {
  'use strict';

  /**
   * Market service.
   * @module api/MarketApi
   * @version 1.0.3
   */

  /**
   * Constructs a new MarketApi. 
   * @alias module:api/MarketApi
   * @class
   * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
   * default to {@link module:ApiClient#instance} if unspecified.
   */
  var exports = function(apiClient) {
    this.apiClient = apiClient || ApiClient.instance;


    /**
     * Callback function to receive the result of the getAverages operation.
     * @callback module:api/MarketApi~getAveragesCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Averages} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * [MOCK] Get Averages for YMM
     * [Merged with the /search API - Please check the &#39;stats&#39; parameter to the Search API above] Get market averages for price / miles / msrp / dom (days on market) fields for active cars matching the given reference VIN&#39;s basic specification or Year, Make, Model, Trim (Optional) criteria
     * @param {String} vin VIN as a reference to the type of car for which averages data is to be returned
     * @param {Object} opts Optional parameters
     * @param {String} opts.apiKey The API Authentication Key. Mandatory with all API calls.
     * @param {String} opts.year Year of the car
     * @param {String} opts.make Make of the car
     * @param {String} opts.model Model of the Car
     * @param {String} opts.trim Trim of the Car
     * @param {String} opts.fields Comma separated list of fields to generate stats for. Allowed fields in the list are - price, miles, msrp, dom (days on market)
     * @param {module:api/MarketApi~getAveragesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Averages}
     */
    this.getAverages = function(vin, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'vin' is set
      if (vin === undefined || vin === null) {
        throw new Error("Missing the required parameter 'vin' when calling getAverages");
      }


      var pathParams = {
      };
      var queryParams = {
        'api_key': opts['apiKey'],
        'vin': vin,
        'year': opts['year'],
        'make': opts['make'],
        'model': opts['model'],
        'trim': opts['trim'],
        'fields': opts['fields'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = Averages;

      return this.apiClient.callApi(
        '/averages', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getComparison operation.
     * @callback module:api/MarketApi~getComparisonCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ComparisonPoint} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Compare market
     * [MOCK] Get historical market trends for cars matching the given VIN&#39;s basic specification or Year, Make, Model, Trim (Optional) criteria
     * @param {String} vin VIN as a reference to the type of car for which comparison data is to be returned
     * @param {Object} opts Optional parameters
     * @param {String} opts.apiKey The API Authentication Key. Mandatory with all API calls.
     * @param {module:api/MarketApi~getComparisonCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ComparisonPoint}
     */
    this.getComparison = function(vin, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'vin' is set
      if (vin === undefined || vin === null) {
        throw new Error("Missing the required parameter 'vin' when calling getComparison");
      }


      var pathParams = {
      };
      var queryParams = {
        'api_key': opts['apiKey'],
        'vin': vin,
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = ComparisonPoint;

      return this.apiClient.callApi(
        '/comparison', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getCompetition operation.
     * @callback module:api/MarketApi~getCompetitionCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CompetitorsPoint} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Competitors
     * [MOCK] Competitor cars in market for current vin
     * @param {String} vin VIN as a reference to the type of car for which competitors data is to be returned
     * @param {Object} opts Optional parameters
     * @param {String} opts.apiKey The API Authentication Key. Mandatory with all API calls.
     * @param {module:api/MarketApi~getCompetitionCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CompetitorsPoint}
     */
    this.getCompetition = function(vin, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'vin' is set
      if (vin === undefined || vin === null) {
        throw new Error("Missing the required parameter 'vin' when calling getCompetition");
      }


      var pathParams = {
      };
      var queryParams = {
        'api_key': opts['apiKey'],
        'vin': vin,
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = CompetitorsPoint;

      return this.apiClient.callApi(
        '/competition', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getDepreciation operation.
     * @callback module:api/MarketApi~getDepreciationCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DepreciationPoint} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Depreciation
     * [MOCK] Model resale value based on depreciation
     * @param {String} vin VIN as a reference to the type of car for which Depreciation stats is to be returned
     * @param {Object} opts Optional parameters
     * @param {String} opts.apiKey The API Authentication Key. Mandatory with all API calls.
     * @param {module:api/MarketApi~getDepreciationCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DepreciationPoint}
     */
    this.getDepreciation = function(vin, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'vin' is set
      if (vin === undefined || vin === null) {
        throw new Error("Missing the required parameter 'vin' when calling getDepreciation");
      }


      var pathParams = {
      };
      var queryParams = {
        'api_key': opts['apiKey'],
        'vin': vin,
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = DepreciationPoint;

      return this.apiClient.callApi(
        '/depreciation', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getMDS operation.
     * @callback module:api/MarketApi~getMDSCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Mds} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Market Days Supply
     * Get the basic information on specifications for a car identified by a valid VIN
     * @param {String} vin VIN to decode
     * @param {Object} opts Optional parameters
     * @param {String} opts.apiKey The API Authentication Key. Mandatory with all API calls.
     * @param {String} opts.exact Exact parameter
     * @param {Number} opts.latitude Latitude component of location
     * @param {Number} opts.longitude Longitude component of location
     * @param {Number} opts.radius Radius around the search location
     * @param {String} opts.debug Debug parameter
     * @param {String} opts.includeSold To fetch sold vins
     * @param {module:api/MarketApi~getMDSCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Mds}
     */
    this.getMDS = function(vin, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'vin' is set
      if (vin === undefined || vin === null) {
        throw new Error("Missing the required parameter 'vin' when calling getMDS");
      }


      var pathParams = {
      };
      var queryParams = {
        'api_key': opts['apiKey'],
        'vin': vin,
        'exact': opts['exact'],
        'latitude': opts['latitude'],
        'longitude': opts['longitude'],
        'radius': opts['radius'],
        'debug': opts['debug'],
        'include_sold': opts['includeSold'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = Mds;

      return this.apiClient.callApi(
        '/mds', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getPopularity operation.
     * @callback module:api/MarketApi~getPopularityCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/PopularityItem>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Popularity
     * [MOCK] [Merged with the /search API - Please check the &#39;popularity&#39; parameter to the Search API above] Get the Popularity for the given simple filter criteria (by given Year, Make, Model, Trim criteria)
     * @param {String} year Year of the car
     * @param {String} make Make of the car
     * @param {String} model Model of the Car
     * @param {String} trim Trim of the Car
     * @param {String} bodyType Body type to filter the cars on. Valid values are the ones returned by body_type facets API call
     * @param {Object} opts Optional parameters
     * @param {String} opts.apiKey The API Authentication Key. Mandatory with all API calls.
     * @param {String} opts.stats The list of fields for which stats need to be generated based on the matching listings for the search criteria. Allowed fields are - price, miles, msrp, dom The stats consists of mean, max, average and count of listings based on which the stats are calculated for the field. Stats could be requested in addition to the listings for the search. Please note - The API calls with the stats fields may take longer to respond.
     * @param {module:api/MarketApi~getPopularityCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/PopularityItem>}
     */
    this.getPopularity = function(year, make, model, trim, bodyType, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'year' is set
      if (year === undefined || year === null) {
        throw new Error("Missing the required parameter 'year' when calling getPopularity");
      }

      // verify the required parameter 'make' is set
      if (make === undefined || make === null) {
        throw new Error("Missing the required parameter 'make' when calling getPopularity");
      }

      // verify the required parameter 'model' is set
      if (model === undefined || model === null) {
        throw new Error("Missing the required parameter 'model' when calling getPopularity");
      }

      // verify the required parameter 'trim' is set
      if (trim === undefined || trim === null) {
        throw new Error("Missing the required parameter 'trim' when calling getPopularity");
      }

      // verify the required parameter 'bodyType' is set
      if (bodyType === undefined || bodyType === null) {
        throw new Error("Missing the required parameter 'bodyType' when calling getPopularity");
      }


      var pathParams = {
      };
      var queryParams = {
        'api_key': opts['apiKey'],
        'year': year,
        'make': make,
        'model': model,
        'trim': trim,
        'body_type': bodyType,
        'stats': opts['stats'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = [PopularityItem];

      return this.apiClient.callApi(
        '/popularity', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getTrends operation.
     * @callback module:api/MarketApi~getTrendsCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/TrendPoint>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get Trends for criteria
     * Get historical market trends for cars matching the given VIN&#39;s basic specification or Year, Make, Model, Trim (Optional) criteria
     * @param {String} vin VIN as a reference to the type of car for which trend data is to be returned
     * @param {String} carType Car type. Allowed values are - new / used / certified
     * @param {Object} opts Optional parameters
     * @param {String} opts.apiKey The API Authentication Key. Mandatory with all API calls.
     * @param {String} opts.year Year of the car
     * @param {String} opts.make Make of the car
     * @param {String} opts.model Model of the Car
     * @param {String} opts.trim Trim of the Car
     * @param {module:api/MarketApi~getTrendsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/TrendPoint>}
     */
    this.getTrends = function(vin, carType, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'vin' is set
      if (vin === undefined || vin === null) {
        throw new Error("Missing the required parameter 'vin' when calling getTrends");
      }

      // verify the required parameter 'carType' is set
      if (carType === undefined || carType === null) {
        throw new Error("Missing the required parameter 'carType' when calling getTrends");
      }


      var pathParams = {
      };
      var queryParams = {
        'api_key': opts['apiKey'],
        'vin': vin,
        'car_type': carType,
        'year': opts['year'],
        'make': opts['make'],
        'model': opts['model'],
        'trim': opts['trim'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = [TrendPoint];

      return this.apiClient.callApi(
        '/trends', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
  };

  return exports;
}));
