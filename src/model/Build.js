/**
 * Marketcheck Cars API
 * <b>Access the New, Used and Certified cars inventories for all Car Dealers in US.</b> <br/>The data is sourced from online listings by over 44,000 Car dealers in US. At any time, there are about 6.2M searchable listings (about 1.9M unique VINs) for Used & Certified cars and about 6.6M (about 3.9M unique VINs) New Car listings from all over US. We use this API at the back for our website <a href='https://www.marketcheck.com' target='_blank'>www.marketcheck.com</a> and our Android and iOS mobile apps too.<br/><h5> Few useful links : </h5><ul><li>A quick view of the API and the use cases is depicated <a href='https://portals.marketcheck.com/mcapi/' target='_blank'>here</a></li><li>The Postman collection with various usages of the API is shared here https://www.getpostman.com/collections/2752684ff636cdd7bac2</li></ul>
 *
 * OpenAPI spec version: 1.0.3
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.0-SNAPSHOT
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'));
  } else {
    // Browser globals (root is window)
    if (!root.MarketcheckCarsApi) {
      root.MarketcheckCarsApi = {};
    }
    root.MarketcheckCarsApi.Build = factory(root.MarketcheckCarsApi.ApiClient);
  }
}(this, function(ApiClient) {
  'use strict';




  /**
   * The Build model module.
   * @module model/Build
   * @version 1.0.3
   */

  /**
   * Constructs a new <code>Build</code>.
   * Describes the Car specification
   * @alias module:model/Build
   * @class
   */
  var exports = function() {
    var _this = this;



























  };

  /**
   * Constructs a <code>Build</code> from a plain JavaScript object, optionally creating a new instance.
   * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
   * @param {Object} data The plain JavaScript object bearing properties of interest.
   * @param {module:model/Build} obj Optional instance to populate.
   * @return {module:model/Build} The populated <code>Build</code> instance.
   */
  exports.constructFromObject = function(data, obj) {
    if (data) {
      obj = obj || new exports();

      if (data.hasOwnProperty('year')) {
        obj['year'] = ApiClient.convertToType(data['year'], 'Number');
      }
      if (data.hasOwnProperty('make')) {
        obj['make'] = ApiClient.convertToType(data['make'], 'String');
      }
      if (data.hasOwnProperty('model')) {
        obj['model'] = ApiClient.convertToType(data['model'], 'String');
      }
      if (data.hasOwnProperty('trim')) {
        obj['trim'] = ApiClient.convertToType(data['trim'], 'String');
      }
      if (data.hasOwnProperty('body_type')) {
        obj['body_type'] = ApiClient.convertToType(data['body_type'], 'String');
      }
      if (data.hasOwnProperty('vehicle_type')) {
        obj['vehicle_type'] = ApiClient.convertToType(data['vehicle_type'], 'String');
      }
      if (data.hasOwnProperty('drivetrain')) {
        obj['drivetrain'] = ApiClient.convertToType(data['drivetrain'], 'String');
      }
      if (data.hasOwnProperty('fuel_type')) {
        obj['fuel_type'] = ApiClient.convertToType(data['fuel_type'], 'String');
      }
      if (data.hasOwnProperty('made_in')) {
        obj['made_in'] = ApiClient.convertToType(data['made_in'], 'String');
      }
      if (data.hasOwnProperty('engine')) {
        obj['engine'] = ApiClient.convertToType(data['engine'], 'String');
      }
      if (data.hasOwnProperty('engine_block')) {
        obj['engine_block'] = ApiClient.convertToType(data['engine_block'], 'String');
      }
      if (data.hasOwnProperty('engine_size')) {
        obj['engine_size'] = ApiClient.convertToType(data['engine_size'], 'String');
      }
      if (data.hasOwnProperty('engine_measure')) {
        obj['engine_measure'] = ApiClient.convertToType(data['engine_measure'], 'String');
      }
      if (data.hasOwnProperty('engine_aspiration')) {
        obj['engine_aspiration'] = ApiClient.convertToType(data['engine_aspiration'], 'String');
      }
      if (data.hasOwnProperty('transmission')) {
        obj['transmission'] = ApiClient.convertToType(data['transmission'], 'String');
      }
      if (data.hasOwnProperty('doors')) {
        obj['doors'] = ApiClient.convertToType(data['doors'], 'Number');
      }
      if (data.hasOwnProperty('cylinders')) {
        obj['cylinders'] = ApiClient.convertToType(data['cylinders'], 'Number');
      }
      if (data.hasOwnProperty('steering_type')) {
        obj['steering_type'] = ApiClient.convertToType(data['steering_type'], 'String');
      }
      if (data.hasOwnProperty('antibrake_sys')) {
        obj['antibrake_sys'] = ApiClient.convertToType(data['antibrake_sys'], 'String');
      }
      if (data.hasOwnProperty('tank_size')) {
        obj['tank_size'] = ApiClient.convertToType(data['tank_size'], 'String');
      }
      if (data.hasOwnProperty('overall_height')) {
        obj['overall_height'] = ApiClient.convertToType(data['overall_height'], 'String');
      }
      if (data.hasOwnProperty('overall_length')) {
        obj['overall_length'] = ApiClient.convertToType(data['overall_length'], 'String');
      }
      if (data.hasOwnProperty('overall_width')) {
        obj['overall_width'] = ApiClient.convertToType(data['overall_width'], 'String');
      }
      if (data.hasOwnProperty('std_seating')) {
        obj['std_seating'] = ApiClient.convertToType(data['std_seating'], 'String');
      }
      if (data.hasOwnProperty('highway_miles')) {
        obj['highway_miles'] = ApiClient.convertToType(data['highway_miles'], 'String');
      }
      if (data.hasOwnProperty('city_miles')) {
        obj['city_miles'] = ApiClient.convertToType(data['city_miles'], 'String');
      }
    }
    return obj;
  }

  /**
   * Year of the Car
   * @member {Number} year
   */
  exports.prototype['year'] = undefined;
  /**
   * Car Make
   * @member {String} make
   */
  exports.prototype['make'] = undefined;
  /**
   * Car model
   * @member {String} model
   */
  exports.prototype['model'] = undefined;
  /**
   * Trim of the car
   * @member {String} trim
   */
  exports.prototype['trim'] = undefined;
  /**
   * Body type of the car
   * @member {String} body_type
   */
  exports.prototype['body_type'] = undefined;
  /**
   * Vehicle type of the car
   * @member {String} vehicle_type
   */
  exports.prototype['vehicle_type'] = undefined;
  /**
   * Drivetrain of the car
   * @member {String} drivetrain
   */
  exports.prototype['drivetrain'] = undefined;
  /**
   * Fuel type of the car
   * @member {String} fuel_type
   */
  exports.prototype['fuel_type'] = undefined;
  /**
   * Made in of the car
   * @member {String} made_in
   */
  exports.prototype['made_in'] = undefined;
  /**
   * Engine of the car
   * @member {String} engine
   */
  exports.prototype['engine'] = undefined;
  /**
   * Engine block of the car
   * @member {String} engine_block
   */
  exports.prototype['engine_block'] = undefined;
  /**
   * Engine size of the car
   * @member {String} engine_size
   */
  exports.prototype['engine_size'] = undefined;
  /**
   * Engine block of the car
   * @member {String} engine_measure
   */
  exports.prototype['engine_measure'] = undefined;
  /**
   * Engine aspiration of the car
   * @member {String} engine_aspiration
   */
  exports.prototype['engine_aspiration'] = undefined;
  /**
   * Transmission of the car
   * @member {String} transmission
   */
  exports.prototype['transmission'] = undefined;
  /**
   * No of doors of the car
   * @member {Number} doors
   */
  exports.prototype['doors'] = undefined;
  /**
   * No of cylinders of the car
   * @member {Number} cylinders
   */
  exports.prototype['cylinders'] = undefined;
  /**
   * Steering type of the car
   * @member {String} steering_type
   */
  exports.prototype['steering_type'] = undefined;
  /**
   * Antibrake system of the car
   * @member {String} antibrake_sys
   */
  exports.prototype['antibrake_sys'] = undefined;
  /**
   * Tank size of the car
   * @member {String} tank_size
   */
  exports.prototype['tank_size'] = undefined;
  /**
   * Overall height of the car
   * @member {String} overall_height
   */
  exports.prototype['overall_height'] = undefined;
  /**
   * Overall length of the car
   * @member {String} overall_length
   */
  exports.prototype['overall_length'] = undefined;
  /**
   * Overall width of the car
   * @member {String} overall_width
   */
  exports.prototype['overall_width'] = undefined;
  /**
   * Std seating of the car
   * @member {String} std_seating
   */
  exports.prototype['std_seating'] = undefined;
  /**
   * Highway miles of the car
   * @member {String} highway_miles
   */
  exports.prototype['highway_miles'] = undefined;
  /**
   * City miles of the car
   * @member {String} city_miles
   */
  exports.prototype['city_miles'] = undefined;



  return exports;
}));


